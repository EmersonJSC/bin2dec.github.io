{"version":3,"sources":["Screens/index.js","App.js","reportWebVitals.js","index.js"],"names":["Index","useState","statebin","setStatebin","className","style","width","type","placeholder","onChange","e","bin","num","split","i","length","parseInt","document","querySelector","classList","add","remove","console","log","errorbin","target","value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wLAiEeA,EA9DD,WAGV,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAsBA,OACI,qBAAKC,UAAU,gCAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAMA,UAAU,8BAAhB,UAEI,oBAAIA,UAAU,0DAAd,qBAEA,sBAAKA,UAAU,wBAAwBC,MAAO,CAACC,MAAO,QAAtD,UACI,oBAAIF,UAAU,gCAAd,mEAED,qBAAKA,UAAU,oBAAoBC,MAAO,CAACC,MAAM,OAAjD,SACI,sBAAKF,UAAU,QAAf,UACI,qBAAKA,UAAU,eAAf,SACK,uBAAOA,UAAU,uDAAuDG,KAAK,OAAOC,YAAY,YAAYC,SAAU,SAAAC,GAAC,OAlCtI,SAACC,GAId,IAFA,IAAIC,EAAMD,EAAIE,MAAM,IAEZC,EAAE,EAAGA,EAAIF,EAAIG,OAAQD,IAAI,CAC7B,GAAwB,IAArBE,SAASJ,EAAIE,KAAkC,IAArBE,SAASJ,EAAIE,IAAU,CAEhDG,SAASC,cAAc,QAAQC,UAAUC,IAAI,aAC7CH,SAASC,cAAc,UAAUC,UAAUE,OAAO,aAClD,MAEAJ,SAASC,cAAc,QAAQC,UAAUE,OAAO,aAChDJ,SAASC,cAAc,UAAUC,UAAUC,IAAI,aAE/CE,QAAQC,IAAKP,SAASL,IACtBR,EAAYa,SAASL,EAAK,KAmBqHa,CAASd,EAAEe,OAAOC,YAElJ,mBAAGtB,UAAU,YAAb,qEACA,mBAAGA,UAAU,sDAAb,wDAIR,gCACI,oBAAIA,UAAU,+BAAd,uBACA,oBAAIA,UAAU,uCAAd,SAAsDF,UAI7D,sBAAKE,UAAU,iBAAf,UACI,qBAAKA,UAAU,iBACf,oBAAIA,UAAU,qBAAd,uD,YC7CTuB,MANf,WACE,OACE,cAAC,EAAD,KCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BZ,K","file":"static/js/main.23ac1378.chunk.js","sourcesContent":["import { useState } from 'react'\n//import './../Styles/Index.css'\n\nconst Index = () =>{\n\n    // useState\n    const [statebin, setStatebin] = useState(\"\");\n    const errorbin = (bin) =>{\n        //console.log (parseInt(bin, 10));\n        var num = bin.split(\"\");\n        //console.log(num.length);\n        for(var i=0; i < num.length; i++){\n            if(parseInt(num[i]) !== 0 && parseInt(num[i]) !== 1){\n                //console.log(\"Nao e binario\");\n                document.querySelector('.bin').classList.add('is-danger'); \n                document.querySelector('.error').classList.remove('is-hidden');\n                break; \n            }else{\n                document.querySelector('.bin').classList.remove('is-danger'); \n                document.querySelector('.error').classList.add('is-hidden'); \n                \n                console.log (parseInt(bin));\n                setStatebin(parseInt(bin, 2));\n            }\n        }\n\n    }\n\n    return(\n        <nav className=\"hero is-fullheight robotofont\">\n            <div className=\"hero-body\">\n                <div  className=\"container has-text-centered\">\n                    {/* Title */}\n                    <h1 className=\"is-size-2 has-text-weight-bold textAliceBlue robotofont\">Bin2Dec</h1>\n                    {/* Corpo */}\n                    <div className=\"container navpagemain\" style={{width: '70vh'}}>\n                        <h6 className=\"textAliceBlue pt-4 is-size-7 \">Esse e um programa de estudos para conversor binario.</h6>\n                        \n                       <div className=\"field mt-6 center\" style={{width:'70%'}}>\n                           <div className=\"label\">\n                               <div className=\"control mt-6\">\n                                    <input className=\"bin input is-large mt-6 is-rounded has-text-centered\" type=\"text\" placeholder=\"001011001\" onChange={e => errorbin(e.target.value)} ></input>\n                               </div>\n                               <p className=\"help mt-3\">Digite um Numero binario para conversão para decimal</p>\n                               <p className=\"error help mt-3 has-text-danger is-size-6 is-hidden\">Voce digitou um numero não binario</p>\n                           </div>\n                       </div>\n\n                       <div>\n                           <h1 className=\"is-size-2 mt-6 textAliceBlue\">Resultado</h1>\n                           <h3 className=\"is-size-1 mt-4 has-text-weight-bold \">{statebin}</h3>\n                       </div>\n                      \n                    </div>\n                    <div className=\"container mt-4\">\n                        <div className=\"heart center\"/>\n                        <h6 className=\"textAliceBlue mt-2\">Desenvolvido por Emerson Costa</h6>\n                        \n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nexport default Index;","import './App.css';\nimport Index from'./Screens/index.js'\nimport './Styles/Index.css'\nimport 'bulma/css/bulma.min.css';\n\nfunction App() {\n  return (\n    <Index />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}